//-----------------------PRIVATE------------------------
//mixin only used to generate class, not for normal use
@mixin class-all-position-all-breakpoint($prop-name, $prop-abbr, $prop-value-list, $position-list: null, $composition-position-list: null, $breakpoint-list: $grid-breakpoint-list, $use-index-as-key: false) {
    @if type-of($prop-value-list) == "list" {
        $new-map: ();

        @if not $use-index-as-key {
            @for $i from 1 through length($prop-value-list) {
                $value: nth($prop-value-list, $i);
                $new-map: map-merge($new-map, ($value: $value));
            }
        }
        @else {
            @for $i from 1 through length($prop-value-list) {
                $value: nth($prop-value-list, $i);
                $new-map: map-merge($new-map, ($i: $value));
            }
        }

        $prop-value-list: $new-map;
    }

    @each $prop-index, $prop-value in $prop-value-list {
        @if $prop-index {
            .#{$prop-abbr}-#{$prop-index} {
                #{$prop-name}: $prop-value;

                @content;
            }
        }
        @else {
            .#{$prop-abbr} {
                #{$prop-name}: $prop-value;

                @content;
            }
        }
    }

    @if $composition-position-list {
        @each $position-index, $position-value in $composition-position-list {
            @each $prop-index, $prop-value in $prop-value-list {
                @if $prop-index {
                    .#{$prop-abbr}-#{$position-index}-#{$prop-index} {
                        #{$prop-name}-#{nth($position-value, 1)}: $prop-value;
                        #{$prop-name}-#{nth($position-value, 2)}: $prop-value;

                        @content;
                    }
                }
                @else {
                    #{$prop-abbr}-#{$position-index} {
                        #{$prop-name}-#{nth($position-value, 1)}: $prop-value;
                        #{$prop-name}-#{nth($position-value, 2)}: $prop-value;

                        @content;
                    }
                }
            }
        }
    }

    @if $position-list {
        @each $position-index, $position-value in $position-list {
            @each $prop-index, $prop-value in $prop-value-list {
                @if $prop-index {
                    .#{$prop-abbr}-#{$position-index}-#{$prop-index} {
                        #{$prop-name}-#{$position-value}: $prop-value;

                        @content;
                    }
                }
                @else {
                    .#{$prop-abbr}-#{$position-index} {
                        #{$prop-name}-#{$position-value}: $prop-value;

                        @content;
                    }
                }
            }
        }
    }

    @each $infix, $size in $breakpoint-list {
        @each $prop-index, $prop-value in $prop-value-list {
            @if $prop-index {
                .#{$prop-abbr}-#{$infix}-#{$prop-index} {
                    @media screen and (max-width: $size) {
                        #{$prop-name}: $prop-value;

                        @content;
                    }
                }
            }
            @else {
                .#{$prop-abbr}-#{$infix} {
                    @media screen and (max-width: $size) {
                        #{$prop-name}: $prop-value;

                        @content;
                    }
                }
            }

            @if $composition-position-list {
                @each $position-index, $position-value in $composition-position-list {
                    @each $prop-index, $prop-value in $prop-value-list {
                        @if $prop-index {
                            .#{$prop-abbr}-#{$position-index}-#{$infix}-#{$prop-index} {
                                @media screen and (max-width: $size) {
                                    #{$prop-name}-#{nth($position-value, 1)}: $prop-value;
                                    #{$prop-name}-#{nth($position-value, 2)}: $prop-value;

                                    @content;
                                }
                            }
                        }
                        @else {
                            #{$prop-abbr}-#{$position-index}-#{$infix} {
                                #{$prop-name}-#{nth($position-value, 1)}: $prop-value;
                                #{$prop-name}-#{nth($position-value, 2)}: $prop-value;

                                @content;
                            }
                        }
                    }
                }
            }

            @if $position-list {
                @each $position-index, $position-value in $position-list {
                    @each $prop-index, $prop-value in $prop-value-list {
                        @if $prop-index {
                            .#{$prop-abbr}-#{$position-index}-#{$infix}-#{$prop-index} {
                                @media screen and (max-width: $size) {
                                    #{$prop-name}-#{$position-value}: $prop-value;

                                    @content;
                                }
                            }
                        }
                        @else {
                            .#{$prop-abbr}-#{$position-index}-#{$infix} {
                                @media screen and (max-width: $size) {
                                    #{$prop-name}-#{$position-value}: $prop-value;

                                    @content;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

@mixin class-all-prop-value($prop-name, $prop-abbr, $prop-value-list, $use-index-as-key: false, $state: null) {
    @if type-of($prop-value-list) == "list" {
        $new-map: ();

        @if not $use-index-as-key {
            @for $i from 1 through length($prop-value-list) {
                $value: nth($prop-value-list, $i);
                $new-map: map-merge($new-map, ($value: $value));
            }
        }
        @else {
            @for $i from 1 through length($prop-value-list) {
                $value: nth($prop-value-list, $i);
                $new-map: map-merge($new-map, ($i: $value));
            }
        }

        $prop-value-list: $new-map;
    }

    @each $prop-index, $prop-value in $prop-value-list {
        @if $prop-index {
            @if not $state {
                .#{$prop-abbr}-#{$prop-index} {
                    #{$prop-name}: $prop-value;

                    @content;
                }
            }
            @else {
                .#{$prop-abbr}-#{$prop-index}:#{$state} {
                    #{$prop-name}: $prop-value;

                    @content;
                }
            }
        }
        @else {
            @if not $state {
                .#{$prop-abbr} {
                    #{$prop-name}: $prop-value;

                    @content;
                }
            }
            @else {
                .#{$prop-abbr}:#{$state} {
                    #{$prop-name}: $prop-value;

                    @content;
                }
            }
        }
    }
}

//-----------------------------------PUBLIC--------------------------------
//for normal use to generate CSS
@mixin breakpoint_desktop_first($point) {
    @if $point == desktoplarge {
        @media (max-width: 1600px) {
            @content;
        }
    }
    @else if $point == desktop {
        @media (max-width: 1440px) {
            @content;
        }
    }
    @else if $point == laptop {
        @media (max-width: 1024px) {
            @content;
        }
    }
    @else if $point == tablet {
        @media (max-width: 768px) {
            @content;
        }
    }
    @else if $point == mobile {
        @media (max-width: 480px) {
            @content;
        }
    }
}

// Transformations
@mixin scale($ratio...) {
    -webkit-transform: scale($ratio);
    -ms-transform: scale($ratio); // IE9 only
    -o-transform: scale($ratio);
    transform: scale($ratio);
}

@mixin scaleX($ratio) {
    -webkit-transform: scaleX($ratio);
    -ms-transform: scaleX($ratio); // IE9 only
    -o-transform: scaleX($ratio);
    transform: scaleX($ratio);
}

@mixin scaleY($ratio) {
    -webkit-transform: scaleY($ratio);
    -ms-transform: scaleY($ratio); // IE9 only
    -o-transform: scaleY($ratio);
    transform: scaleY($ratio);
}

@mixin skew($x, $y) {
    -webkit-transform: skewX($x) skewY($y);
    -ms-transform: skewX($x) skewY($y); // See https://github.com/twbs/bootstrap/issues/4885; IE9+
    -o-transform: skewX($x) skewY($y);
    transform: skewX($x) skewY($y);
}

@mixin translate($x, $y) {
    -webkit-transform: translate($x, $y);
    -ms-transform: translate($x, $y); // IE9 only
    -o-transform: translate($x, $y);
    transform: translate($x, $y);
}

@mixin translate3d($x, $y, $z) {
    -webkit-transform: translate3d($x, $y, $z);
    transform: translate3d($x, $y, $z);
}

@mixin rotate($degrees) {
    -webkit-transform: rotate($degrees);
    -ms-transform: rotate($degrees); // IE9 only
    -o-transform: rotate($degrees);
    transform: rotate($degrees);
}

@mixin rotateX($degrees) {
    -webkit-transform: rotateX($degrees);
    -ms-transform: rotateX($degrees); // IE9 only
    -o-transform: rotateX($degrees);
    transform: rotateX($degrees);
}

@mixin rotateY($degrees) {
    -webkit-transform: rotateY($degrees);
    -ms-transform: rotateY($degrees); // IE9 only
    -o-transform: rotateY($degrees);
    transform: rotateY($degrees);
}

@mixin rotate3d($x, $y, $z, $a) {
    -webkit-transform: rotate3d($x, $y, $z, $a);
    -ms-transform: rotate3d($x, $y, $z, $a); // IE9 only
    -o-transform: rotate3d($x, $y, $z, $a);
    transform: rotate3d($x, $y, $z, $a);
}

@mixin perspective($perspective) {
    -webkit-perspective: $perspective;
    -moz-perspective: $perspective;
    perspective: $perspective;
}

@mixin perspective-origin($perspective) {
    -webkit-perspective-origin: $perspective;
    -moz-perspective-origin: $perspective;
    perspective-origin: $perspective;
}

@mixin transform-origin($origin) {
    -webkit-transform-origin: $origin;
    -moz-transform-origin: $origin;
    -ms-transform-origin: $origin; // IE9 only
    transform-origin: $origin;
}

@mixin backface-visibility($arguments) {
    -webkit-backface-visibility: $arguments;
    -moz-backface-visibility: $arguments;
    -ms-backface-visibility: $arguments;
    -o-backface-visibility: $arguments;
    backface-visibility: $arguments;
}

/* CSS transform hacks */
@mixin css-transform-hack {
    -moz-backface-visibility: hidden;
    -ms-backface-visibility: hidden;
    -o-backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
    -moz-transform: rotateY(0deg);
    -ms-transform: rotateY(0deg);
    -o-transform: rotateY(0deg);
    transform: rotateY(0deg);
}
